version: "3"
services:
  # prometheus for metrics monitoring
  prom:
    image: quay.io/prometheus/prometheus:v2.0.0
    volumes:
     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
     - 9090:9090
    depends_on:
     - api-gateway1
     - api-gateway2
     - cadvisor
  
  # grafana for dashboard of metrics monitoring
  grafana:
    image: grafana/grafana
    ports:
     - "3000:3000"
    volumes:
    - ./grafana/storage:/var/lib/grafana
    depends_on:
      - prom
  
  # cAdvisor to monitor all containers
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
    - redis-user-sessions
    - app
    - api-gateway1
    - api-gateway2
    - user-service
    - item-service
    - price-service
    - user-db
    - items-db

  # nginx gateway for frontend & routing
  app:
    build: ./app
    ports:
      - "80:80"
    depends_on:
      - api-gateway1
      - api-gateway2
    volumes:
      - ./app/logs:/var/log/nginx


  # (server1) api-gateway with GO
  api-gateway1:
    build: ./api-gateway
    environment:
      - REDISPORT=6379
      - REDISHOST=redis-user-sessions
      - APPID=8000
    ports:
      - "8000:8000"
    depends_on:
      - user-service
      - item-service
      - redis-user-sessions
    volumes:
      - ./api-gateway/logs:/api/logs

  # (server2) api-gateway with GO
  api-gateway2:
    build: ./api-gateway
    environment:
      - REDISPORT=6379
      - REDISHOST=redis-user-sessions
      - APPID=8001
    ports:
      - "8001:8001"
    depends_on:
      - user-service
      - item-service
      - redis-user-sessions
    volumes:
      - ./api-gateway/logs:/api/logs

  # # api-gateway with GO
  # api-gateway:
  #   build: ./api-gateway
  #   environment:
  #     - REDISPORT=6379
  #     - REDISHOST=redis-user-sessions
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - user-service
  #     - item-service
  #     - redis-user-sessions
  #   volumes:
  #     - ./api-gateway/logs:/api/logs

  # redis cache for user session management
  redis-user-sessions:
    image: redis:latest
    volumes:
        - ./api-gateway/data/redis:/data
    ports:
        - 6379:6379

  # user service with GO
  user-service:
    build: ./user-service
    ports:
      - "4040:4040"
    depends_on:
      - user-db
    volumes:
      - ./user-service/logs:/user-service/logs

  # load balancer for item service
  item-service:
    image: haproxy
    ports:
        - "50051:50051"
    depends_on:
      - item-service1
      - item-service2
    volumes:
        - ./haproxy:/usr/local/etc/haproxy

  # (server1) item service with python
  item-service1:
    build: ./item-service
    ports:
      - "1111:1111"
    environment:
      - APPID=1111
    depends_on:
      - items-db
    volumes:
      - ./item-service:/item-service

  # (server2) item service with python
  item-service2:
    build: ./item-service
    ports:
      - "2222:2222"
    environment:
      - APPID=2222
    depends_on:
      - items-db
    volumes:
      - ./item-service:/item-service
  
  # item service with python
  # item-service:
  #   build: ./item-service
  #   ports:
  #     - "50051:50051"
  #   depends_on:
  #     - items-db
  #   volumes:
  #     - ./item-service:/item-service

  # price service with python
  price-service:
    build: ./price-service
    depends_on:
      - items-db
    volumes:
      - ./price-service:/price-service

  
  # user db with mySQL
  user-db:
    image: mysql:5.7
    ports:
      - "32000:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./db/user-db/storage:/var/lib/mysql:rw
      - ./db/user-db:/docker-entrypoint-initdb.d/:ro

  # item db with mySQL
  items-db:
    image: mysql:5.7
    ports:
      - "42000:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./db/items-db/storage:/var/lib/mysql:rw
      - ./db/items-db:/docker-entrypoint-initdb.d/:ro